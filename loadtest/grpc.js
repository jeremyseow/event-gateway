import grpc from 'k6/net/grpc';
import { check, sleep } from 'k6';
import { getCurrentStageIndex } from 'https://jslib.k6.io/k6-utils/1.3.0/index.js';

const client = new grpc.Client();
client.load(['../pb'], 'event.proto');

export const options = {
    scenarios: {
        smokeTest: {
            executor: 'constant-vus', // control how k6 schedules VUs and iterations. 
            vus: 3, // for smoke test, keep it at 2, 3, max 5 VUs
            duration: '10s', //  duration of the test
            gracefulStop: '0s', // do not wait for iterations to finish in the end
            tags: { test_type: 'smoke-test' }, // extra tags for the metrics generated by this scenario
            exec: 'smokeTest', // the function this scenario will execute
        },
        stressTest: {
            executor: 'ramping-vus', // control how k6 schedules VUs and iterations. 
            startVUs: 0, 
            startTime: '10s', // time offset since the start of the test to start the scenario
            stages: [
                { duration: '10s', target: 10 },
                { duration: '30s', target: 50 },
                { duration: '10s', target: 0 },
              ],
            gracefulRampDown: '0s',
            tags: { test_type: 'stress-test' }, // extra tags for the metrics generated by this scenario
            exec: 'stressTest', // the function this scenario will execute
        }
    }
};

export function setup() {
    const payload = {
        events: [
            {
                 name: 'event1',
                 attributes: {
                    'attr1': 'val1',
                    'attr2': 2,
                    'attr3': true
                 }
            },
            {
                name: 'event2',
                attributes: {
                   'attr1': 'val1',
                   'attr2': 2,
                   'attr3': true
                }
           }
        ]
      }

    return {payload: payload}
}

export function smokeTest (data) {
  client.connect('localhost:8082', {
    plaintext: true
  });
  
  const response = client.invoke('EventService/SendEvent', data.payload);

  check(response, {
    'status is OK': (r) => r && r.status === grpc.StatusOK,
  });

  // console.log(JSON.stringify(response.message));

  client.close();
  sleep(1);
};

export function stressTest (data) {
    // if (getCurrentStageIndex() === 1) {
    //     console.log('Running the second stage where the expected target is 50');
    // }
    
    client.connect('localhost:8082', {
      plaintext: true
    });
    
    const response = client.invoke('EventService/SendEvent', data.payload);
  
    check(response, {
      'status is OK': (r) => r && r.status === grpc.StatusOK,
    });
    
    client.close();
    sleep(1);
  };

  export function teardown(data) {
    
  }